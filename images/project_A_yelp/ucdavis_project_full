-START-

IMPORTANT!!!: Please expand window's width for proper table view.
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.

-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

Part 1: Yelp Dataset Profiling and Understanding

-----------------------------------------------------------------------------------------

1. Profile the data by finding the total number of records for each of the tables below:
	
		i. Attribute table = 10,000 rows.

		ii. Business table = 10,000 rows.

		iii. Category table = 10,000 rows.

		iv. Checkin table = 10,000 rows.

		v. elite_years table = 10,000 rows.

		vi. friend table = 10,000 rows.

		vii. hours table = 10,000 rows.

		viii. photo table = 10,000 rows.

		ix. review table = 10,000 rows. 

		x. tip table = 10,000 rows. 

		xi. user table = 10,000 rows.
	
				SQL code used to arrive at answer: 

					SELECT * FROM table_name

-----------------------------------------------------------------------------------------

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

	Primary Key: PK
	Foreign Keys: FK, FK1, FK2

		i. Business = 
					10,000 distinct records by PK 'id'.

		ii. Hours = 
					1,562 distinct records by FK 'business_id'.

		iii. Category = 
					2,643 distinct records by FK 'business_id'.

		iv. Attribute = 
					1,115 distinct records by FK 'business_id'.

		v. Review = 
					10,000 distinct records by PK 'id',
					OR
					8,090 distinct records by FK1 'business_id',
					OR
					9,581 distinct records by FK2 'user_id'.

		vi. Checkin = 
					493 distinct records by FK 'business_id'.

		vii. Photo = 
					10,000 distinct records by PK 'id',
					OR
					6,493 distinct records by FK 'business_id'. 

		viii. Tip = 
					537 distinct records by FK1 'user_id',
					OR
					3,979 distinct records by FK2 'business_id'.

		ix. User = 
					10,000 distinct records by PK 'id'. 

		x. Friend = 
					11 distinct records by FK 'user_id'.

		xi. Elite_years = 
					2,780 distinct records by FK 'user_id'.

	Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

		SQL code used to arrive at answer: 

			SELECT DISTINCT column_name FROM table_name

-----------------------------------------------------------------------------------------

3. Are there any columns with null values in the User table? Indicate "yes," or "no."

	Answer: no
	
		SQL code used to arrive at answer: 

			SELECT *
			FROM User
			WHERE 
				(id IS NULL) 
				OR 
				(name IS NULL) 
				OR 
				(review_count IS NULL) 
				OR 
				(yelping_since IS NULL) 
				OR 
				(useful IS NULL) 
				OR 
				(funny IS NULL) 
				OR 
				(cool IS NULL) 
				OR 
				(fans IS NULL) 
				OR 
				(average_stars IS NULL) 
				OR 
		    	(compliment_hot IS NULL) 
		    	OR 
		    	(compliment_more IS NULL) 
		    	OR
		    	(compliment_profile IS NULL)
		    	OR 
		    	(compliment_cute IS NULL)
		    	OR
		    	(compliment_list IS NULL)
		    	OR 
		    	(compliment_note IS NULL)
		    	OR
		    	(compliment_plain IS NULL)
		    	OR 
		    	(compliment_cool IS NULL)
		    	OR
		    	(compliment_funny IS NULL)
		    	OR
		    	(compliment_writer IS NULL)
		    	OR
		    	(compliment_photos IS NULL)
	
-----------------------------------------------------------------------------------------
	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
	
		SQL code used to arrive at answer: 

			SELECT 
				MIN(column_name)
			FROM table_name;

			SELECT 
				MAX(column_name)
			FROM table_name;

			SELECT 
				AVG(column_name) 
			FROM table_name;

-----------------------------------------------------------------------------------------

5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

		SELECT 
		    city,
		    SUM(review_count) AS ReviewCount
		FROM business
		GROUP BY city
		ORDER BY ReviewCount DESC
	
	Copy and Paste the Result Below:

		+-----------------+-------------+
		| city            | ReviewCount |
		+-----------------+-------------+
		| Las Vegas       |       82854 |
		| Phoenix         |       34503 |
		| Toronto         |       24113 |
		| Scottsdale      |       20614 |
		| Charlotte       |       12523 |
		| Henderson       |       10871 |
		| Tempe           |       10504 |
		| Pittsburgh      |        9798 |
		| Montréal        |        9448 |
		| Chandler        |        8112 |
		| Mesa            |        6875 |
		| Gilbert         |        6380 |
		| Cleveland       |        5593 |
		| Madison         |        5265 |
		| Glendale        |        4406 |
		| Mississauga     |        3814 |
		| Edinburgh       |        2792 |
		| Peoria          |        2624 |
		| North Las Vegas |        2438 |
		| Markham         |        2352 |
		| Champaign       |        2029 |
		| Stuttgart       |        1849 |
		| Surprise        |        1520 |
		| Lakewood        |        1465 |
		| Goodyear        |        1155 |
		+-----------------+-------------+

-----------------------------------------------------------------------------------------

6. Find the distribution of star ratings to the business in the following cities:

	i. Avon

		SQL code used to arrive at answer:

			SELECT 
			    stars,
			    COUNT(stars)
			FROM business
			WHERE city == 'Avon'
			GROUP BY stars

		Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

			+-------+--------------+
			| stars | COUNT(stars) |
			+-------+--------------+
			|   1.5 |            1 |
			|   2.5 |            2 |
			|   3.5 |            3 |
			|   4.0 |            2 |
			|   4.5 |            1 |
			|   5.0 |            1 |
			+-------+--------------+

	ii. Beachwood

		SQL code used to arrive at answer:

			SELECT 
			    stars,
			    COUNT(stars)
			FROM business
			WHERE city == 'Beachwood'
			GROUP BY stars

		Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

			+-------+--------------+
			| stars | COUNT(stars) |
			+-------+--------------+
			|   2.0 |            1 |
			|   2.5 |            1 |
			|   3.0 |            2 |
			|   3.5 |            2 |
			|   4.0 |            1 |
			|   4.5 |            2 |
			|   5.0 |            5 |
			+-------+--------------+
		
-----------------------------------------------------------------------------------------

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

		SELECT 
		    name,
		    review_count
		FROM user
		ORDER BY review_count DESC
		LIMIT 3
		
	Copy and Paste the Result Below:

		1/ Gerald: 2,000 review count.

		2/ Sara: 1,629 review count.

		3/ Yuri: 1,339 review count.

			+--------+--------------+
			| name   | review_count |
			+--------+--------------+
			| Gerald |         2000 |
			| Sara   |         1629 |
			| Yuri   |         1339 |
			+--------+--------------+

-----------------------------------------------------------------------------------------

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

		Posing more reviews is somewhat correlate with more fans.
		It doesn't mean having more review counts is also having more fans,
		but posing more reviews tends to increase more chances of attracting fans.

		SQL Codes and resulting tables to support findings:

		SELECT								SELECT
		    review_count,						review_count,
		    fans								fans
		FROM user							FROM user
		ORDER BY review_count DESC			ORDER BY fans DESC	

		+--------------+------+				+--------------+------+	
		| review_count | fans |				| review_count | fans |
		+--------------+------+				+--------------+------+
		|         2000 |  253 |				|          609 |  503 |
		|         1629 |   50 |				|          968 |  497 |
		|         1339 |   76 |				|         1153 |  311 |
		|         1246 |  101 |				|         2000 |  253 |
		|         1215 |  126 |				|          930 |  173 |
		|         1153 |  311 |				|          813 |  159 |
		|         1116 |   16 |				|          377 |  133 |
		|         1039 |  104 |				|         1215 |  126 |
		|          968 |  497 |				|          862 |  124 |
		|          930 |  173 |				|          834 |  120 |
		|          904 |   38 |				|          861 |  115 |
		|          864 |   43 |				|          408 |  111 |
		|          862 |  124 |				|          255 |  105 |
		|          861 |  115 |				|         1039 |  104 |
		|          842 |   85 |				|          694 |  101 |
		|          836 |   37 |				|         1246 |  101 |
		|          834 |  120 |				|          307 |   96 |
		|          813 |  159 |				|          584 |   89 |
		|          775 |   61 |				|          842 |   85 |
		|          754 |   78 |				|          220 |   84 |
		|          702 |   35 |				|          408 |   81 |
		|          696 |   10 |				|          178 |   80 |
		|          694 |  101 |				|          754 |   78 |
		|          676 |   25 |				|         1339 |   76 |
		|          675 |   45 |				|          161 |   73 |
		+--------------+------+				+--------------+------+													

		(Output limit exceeded, 25 of 10000 total rows shown)										
										
-----------------------------------------------------------------------------------------

9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews with the word "love" than reviews with the word "hate", 1780 vs 232.

	
	SQL code used to arrive at answer:

		SELECT 
		    COUNT(text) AS number_of_love
		FROM review
		WHERE text LIKE '%love%'

		+----------------+
		| number_of_love |
		+----------------+
		|           1780 |
		+----------------+

		SELECT 
		    COUNT(text) AS number_of_hate
		FROM review
		WHERE text LIKE '%hate%'

		+----------------+
		| number_of_hate |
		+----------------+
		|            232 |
		+----------------+

-----------------------------------------------------------------------------------------

10. Find the top 10 users with the most fans:

	Answer:

		 1. Amy
		 2. Mimi
		 3. Harald
		 4. Gerald
		 5. Christine
		 6. Lisa
		 7. Cat
		 8. William
		 9. Fran
		10. Lissa

	SQL code used to arrive at answer:
	
		SELECT
		    name,
		    fans
		FROM user
		ORDER BY fans DESC
		LIMIT 10
	
	Copy and Paste the Result Below:

		+-----------+------+
		| name      | fans |
		+-----------+------+
		| Amy       |  503 |
		| Mimi      |  497 |
		| Harald    |  311 |
		| Gerald    |  253 |
		| Christine |  173 |
		| Lisa      |  159 |
		| Cat       |  133 |
		| William   |  126 |
		| Fran      |  124 |
		| Lissa     |  120 |
		+-----------+------+

-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

Part 2: Inferences and Analysis

-----------------------------------------------------------------------------------------

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

	//Line 462 to 549 is extra to support the choices of city and category.

	City: Phoenix, AZ

		Because Phoenix city in Arizona has the most food related businesses (8 businesses).

		SQL code used to arrive at answer:

		SELECT 
		    b.city,
		    COUNT(c.category) AS NumberOfFoodBusiness
		FROM business b LEFT JOIN category c 
		    ON b.id = c.business_id
		WHERE (b.name IS NOT NULL) AND (b.city IS NOT NULL) AND (c.category LIKE '%food%')
		GROUP BY city
		ORDER BY NumberOfFoodBusiness DESC	

		+-----------------+----------------------+
		| city            | NumberOfFoodBusiness |
		+-----------------+----------------------+
		| Phoenix         |                    8 |
		| Cleveland       |                    7 |
		| Toronto         |                    7 |
		| Las Vegas       |                    3 |
		| Oakville        |                    2 |
		| Scottsdale      |                    2 |
		| Tempe           |                    2 |
		| Chandler        |                    1 |
		| Charlotte       |                    1 |
		| Chesterland     |                    1 |
		| Gilbert         |                    1 |
		| Litchfield Park |                    1 |
		| Middleton       |                    1 |
		| Murrysville     |                    1 |
		| North Randall   |                    1 |
		| Paw Creek       |                    1 |
		| Pittsburgh      |                    1 |
		| Tolleson        |                    1 |
		| Verdun          |                    1 |
		| Willoughby      |                    1 |
		| York            |                    1 |
		+-----------------+----------------------+

		SELECT 
		    b.name,
		    b.city,
		    c.category
		FROM business b LEFT JOIN category c 
		    ON b.id = c.business_id
		WHERE b.city == 'Phoenix' AND c.category LIKE '%food%'

			+----------------------------------------+---------+-----------+
			| name                                   | city    | category  |
			+----------------------------------------+---------+-----------+
			| Five Guys                              | Phoenix | Fast Food |
			| Starbucks                              | Phoenix | Food      |
			| McDonald's                             | Phoenix | Fast Food |
			| Charlie D's Catfish & Chicken          | Phoenix | Soul Food |
			| Charlie D's Catfish & Chicken          | Phoenix | Seafood   |
			| Water N Ice                            | Phoenix | Food      |
			| Safeway Food & Drug                    | Phoenix | Food      |
			| Bootleggers Modern American Smokehouse | Phoenix | Food      |
			+----------------------------------------+---------+-----------+

	Category: All "food" categories combine

		SQL code used to arrive at answer:

		SELECT DISTINCT category
		FROM category
		WHERE category LIKE '%food%'

			+------------------------+
			| category               |
			+------------------------+
			| Food                   |
			| Soul Food              |
			| Seafood                |
			| Comfort Food           |
			| Specialty Food         |
			| Fast Food              |
			| Ethnic Food            |
			| Food Trucks            |
			| Seafood Markets        |
			| Food Delivery Services |
			| Imported Food          |
			| Food Stands            |
			| Do-It-Yourself Food    |
			| Food Court             |
			+------------------------+

	i. Do the two groups you chose to analyze have a different distribution of hours?

		Analysis: 
			2-3 stars food-related businesses are fast food chain with operation hours from early in the morning 5:00 AM to late night.
			4-5 stars food-related businesses are actual dine-in restaurants with normal operation hours range from 10:00-11:00 AM to 18:00-22:00 PM.
			Therefore, there are a different distribution of hours between 2-3 stars and 4-5 stars businesses.


		SQL code used for analysis (2 tables):

		Table 1 - businesses with 4-5 stars:
		SELECT
		    b.name,
		    c.category,
		    b.stars,
		    h.hours
		FROM ((business b LEFT JOIN category c ON b.id = c.business_id) 
		    LEFT JOIN hours h ON b.id = h.business_id)
		WHERE 
		    (c.category LIKE '%food%') AND 
		    (b.city == 'Phoenix') AND 
		    (h.hours IS NOT NULL) AND 
		    (b.stars >= 4.0)
		ORDER BY stars DESC
		+----------------------------------------+-----------+-------+-----------------------+
		| name                                   | category  | stars | hours                 |
		+----------------------------------------+-----------+-------+-----------------------+
		| Charlie D's Catfish & Chicken          | Soul Food |   4.5 | Monday|11:00-18:00    |
		| Charlie D's Catfish & Chicken          | Soul Food |   4.5 | Tuesday|11:00-18:00   |
		| Charlie D's Catfish & Chicken          | Soul Food |   4.5 | Friday|11:00-18:00    |
		| Charlie D's Catfish & Chicken          | Soul Food |   4.5 | Wednesday|11:00-18:00 |
		| Charlie D's Catfish & Chicken          | Soul Food |   4.5 | Thursday|11:00-18:00  |
		| Charlie D's Catfish & Chicken          | Soul Food |   4.5 | Sunday|13:00-16:00    |
		| Charlie D's Catfish & Chicken          | Soul Food |   4.5 | Saturday|11:00-18:00  |
		| Charlie D's Catfish & Chicken          | Seafood   |   4.5 | Monday|11:00-18:00    |
		| Charlie D's Catfish & Chicken          | Seafood   |   4.5 | Tuesday|11:00-18:00   |
		| Charlie D's Catfish & Chicken          | Seafood   |   4.5 | Friday|11:00-18:00    |
		| Charlie D's Catfish & Chicken          | Seafood   |   4.5 | Wednesday|11:00-18:00 |
		| Charlie D's Catfish & Chicken          | Seafood   |   4.5 | Thursday|11:00-18:00  |
		| Charlie D's Catfish & Chicken          | Seafood   |   4.5 | Sunday|13:00-16:00    |
		| Charlie D's Catfish & Chicken          | Seafood   |   4.5 | Saturday|11:00-18:00  |
		| Bootleggers Modern American Smokehouse | Food      |   4.0 | Monday|11:00-22:00    |
		| Bootleggers Modern American Smokehouse | Food      |   4.0 | Tuesday|11:00-22:00   |
		| Bootleggers Modern American Smokehouse | Food      |   4.0 | Friday|11:00-22:00    |
		| Bootleggers Modern American Smokehouse | Food      |   4.0 | Wednesday|11:00-22:00 |
		| Bootleggers Modern American Smokehouse | Food      |   4.0 | Thursday|11:00-22:00  |
		| Bootleggers Modern American Smokehouse | Food      |   4.0 | Sunday|11:00-22:00    |
		| Bootleggers Modern American Smokehouse | Food      |   4.0 | Saturday|11:00-22:00  |
		+----------------------------------------+-----------+-------+-----------------------+

		Table 2 - businesses with 2-3 stars:
		SELECT
		    b.name,
		    c.category,
		    b.stars,
		    h.hours
		FROM ((business b LEFT JOIN category c ON b.id = c.business_id) 
		    LEFT JOIN hours h ON b.id = h.business_id)
		WHERE 
		    (c.category LIKE '%food%') AND 
		    (b.city == 'Phoenix') AND 
		    (h.hours IS NOT NULL) AND 
		    (b.stars < 4.0)
		ORDER BY stars DESC
		+------------+-----------+-------+-----------------------+
		| name       | category  | stars | hours                 |
		+------------+-----------+-------+-----------------------+
		| Five Guys  | Fast Food |   3.5 | Monday|10:00-22:00    |
		| Five Guys  | Fast Food |   3.5 | Tuesday|10:00-22:00   |
		| Five Guys  | Fast Food |   3.5 | Friday|10:00-22:00    |
		| Five Guys  | Fast Food |   3.5 | Wednesday|10:00-22:00 |
		| Five Guys  | Fast Food |   3.5 | Thursday|10:00-22:00  |
		| Five Guys  | Fast Food |   3.5 | Sunday|10:00-22:00    |
		| Five Guys  | Fast Food |   3.5 | Saturday|10:00-22:00  |
		| Starbucks  | Food      |   3.0 | Monday|5:00-20:00     |
		| Starbucks  | Food      |   3.0 | Tuesday|5:00-20:00    |
		| Starbucks  | Food      |   3.0 | Friday|5:00-20:00     |
		| Starbucks  | Food      |   3.0 | Wednesday|5:00-20:00  |
		| Starbucks  | Food      |   3.0 | Thursday|5:00-20:30   |
		| Starbucks  | Food      |   3.0 | Sunday|5:00-20:00     |
		| Starbucks  | Food      |   3.0 | Saturday|5:00-20:00   |
		| McDonald's | Fast Food |   2.0 | Monday|5:00-23:00     |
		| McDonald's | Fast Food |   2.0 | Tuesday|5:00-23:00    |
		| McDonald's | Fast Food |   2.0 | Friday|5:00-0:00      |
		| McDonald's | Fast Food |   2.0 | Wednesday|5:00-23:00  |
		| McDonald's | Fast Food |   2.0 | Thursday|5:00-23:00   |
		| McDonald's | Fast Food |   2.0 | Sunday|5:00-23:00     |
		| McDonald's | Fast Food |   2.0 | Saturday|5:00-0:00    |
		+------------+-----------+-------+-----------------------+

	ii. Do the two groups you chose to analyze have a different number of reviews?
	         
		Total review count of businesses with 4-5 stars is 3,115 review counts,
		while total review count of businesses with 2-3 stars is 861 review counts.
		Therefore, There is a different number of reviews between the two groups.

			SQL code used for analysis:

				SELECT
				    SUM(review_count) AS FourStarsOrMore
				FROM ((business b LEFT JOIN category c ON b.id = c.business_id) 
				    LEFT JOIN hours h ON b.id = h.business_id)
				WHERE 
				    (c.category LIKE '%food%') AND 
				    (b.city == 'Phoenix') AND 
				    (h.hours IS NOT NULL) AND 
				    (b.stars >= 4.0)
				+-----------------+
				| FourStarsOrMore |
				+-----------------+
				|            3115 |
				+-----------------+

				SELECT
				    SUM(review_count) AS LessThanFourStars
				FROM ((business b LEFT JOIN category c ON b.id = c.business_id) 
				    LEFT JOIN hours h ON b.id = h.business_id)
				WHERE 
				    (c.category LIKE '%food%') AND 
				    (b.city == 'Phoenix') AND 
				    (h.hours IS NOT NULL) AND 
				    (b.stars < 4.0)
				+-------------------+
				| LessThanFourStars |
				+-------------------+
				|               861 |
				+-------------------+

	iii. Are you able to infer anything from the location data provided between these two groups? Explain.

		It has the exact address data for each business, but 'neighborhood' values are mostly NULL for both of the groups.
		With exact location data, we won't be able to extract any insights.
		But I believe with 'neighborhood' data, we will be able to find more useful findings.

	SQL code used for analysis:

+----------------------------------------+-----------+-----------------------------+--------------+
| name                                   | category  | address                     | neighborhood |
+----------------------------------------+-----------+-----------------------------+--------------+
| Bootleggers Modern American Smokehouse | Food      | 3375 E Shea Blvd            |              |
| Charlie D's Catfish & Chicken          | Seafood   | 1153 E Jefferson St         |              |
| Five Guys                              | Fast Food | 2641 N 44th St, Ste 100     |              |
| McDonald's                             | Fast Food | 1850 S 7th St               |              |
| Starbucks                              | Food      | 4605 E Chandler Blvd, Ste A |              |
+----------------------------------------+-----------+-----------------------------+--------------+

-----------------------------------------------------------------------------------------

2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
	i. Difference 1:

		Number of open businesses vs. number of closed businesses.
		(8,480 vs. 1,520)
	         
	ii. Difference 2:

		Big difference in total review count.
		(26,9300 vs. 35,261)
	         
		SQL code used for analysis:

		SELECT 
		    COUNT(name)AS NumberOfBusinesses,
		    is_open AS OPEN_1_CLOSE_0,
		    SUM(review_count) AS TotalReviewCount,
		    AVG(stars) AS AverageStars
		FROM business
		GROUP BY is_open

		+--------------------+----------------+------------------+---------------+
		| NumberOfBusinesses | OPEN_1_CLOSE_0 | TotalReviewCount |  AverageStars |
		+--------------------+----------------+------------------+---------------+
		|               1520 |              0 |            35261 | 3.52039473684 |
		|               8480 |              1 |           269300 | 3.67900943396 |
		+--------------------+----------------+------------------+---------------+

-----------------------------------------------------------------------------------------

3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
	i. Indicate the type of analysis you chose to do:
	        
		Research the user accounts, and find out all about users' account history such as; when did they sign up, amount of users joined per year, and user's behavior, etc. These data will be helpful for Yelp's marketing department in order to target more users to become a Yelp's member.

		(Dataset range from 2005 - 2017)
	         
	ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

		From the resulting table, user's data is range from year 2005 to 2017.
		There are 3,454 users joined within the spand of 12 years.
		With 3,454 accounts, and average of 4.2 years per account, that is below median line of 6 years.
		That means most users joined after the second half period.
			(First period: 2005 - 2010
			Second period: 2011 - 2017)
		Number of users joined increased rapidly starting around 2010-2011, and peaked in 2014, then decreased drastically in 2017.
		Therefore, we have to find out what changed in 2017 and the cause of it.

	iii. Output of your finished dataset:

	Column Names:
		  I. Total number of users: 3,454.
		 II. Oldest account joined: in 2005.
		III. Number of Years the oldest account has joined: 12 years.
		 IV. Newest account joined: in 2017.
		  V. Number of Years the newest account has joined: 0 years.
		 VI. Average years joined for all accounts: ~ 4.2 years.
		VII. Median years joined for all accounts: ~ 6 years.

     I          II             III            IV              V            VI         VII
+----------+-----------+-----------------+-----------+-----------------+--------+-----------+
| NumUsers | OldestAcc | NumYrsOldestAcc | NewestAcc | NumYrsNewestAcc | AvgYrs | MedianYrs |
+----------+-----------+-----------------+-----------+-----------------+--------+-----------+
|     3454 | 2005      |              12 | 2017      |               0 | 4.1995 |         6 |
+----------+-----------+-----------------+-----------+-----------------+--------+-----------+

		+-------------+---------------------+
		| JoinedSince | NumberOfUsersJoined |
		+-------------+---------------------+
		| 2005        |                  13 |
		| 2006        |                  49 |
		| 2007        |                 133 |
		| 2008        |                 273 |
		| 2009        |                 513 |
		| 2010        |                 801 |
		| 2011        |                1233 |
		| 2012        |                1282 |
		| 2013        |                1369 |
		| 2014        |                1541 |
		| 2015        |                1438 |
		| 2016        |                1019 |
		| 2017        |                 336 |
		+-------------+---------------------+

	iv. Provide the SQL code you used to create your final dataset:

		(Since the dataset stopped at year 2017, we cannot use STRFTIME('%Y', 'now') to find average and median becuase it will produce incorret data)

		SELECT 
		    COUNT(DISTINCT name) AS NumUsers,
		    MIN(STRFTIME('%Y', yelping_since)) AS OldestAcc,
		    (SELECT
		        MAX(STRFTIME('%Y', 'now') - STRFTIME('%Y', yelping_since))
		    FROM user
		    ) AS NumYrsOldestAcc,
		    MAX(STRFTIME('%Y', yelping_since)) AS NewestAcc,
		    (SELECT
		        MIN(STRFTIME('%Y', 'now') - STRFTIME('%Y', yelping_since))
		    FROM user
		    ) AS NumYrsNewestAcc,
		    AVG(STRFTIME('%Y', 'now') -  STRFTIME('%Y', yelping_since)) AS AvgYrs,
		    (((SELECT
		        MAX(STRFTIME('%Y', 'now') - STRFTIME('%Y', yelping_since))
		    FROM user
		    )
		    +
		    (SELECT
		        MIN(STRFTIME('%Y', 'now') - STRFTIME('%Y', yelping_since))
		    FROM user
		    ))/2)
		    AS MedianYrs
		FROM user;

		SELECT 
		    STRFTIME('%Y', yelping_since) AS JoinedSince,
		    COUNT(DISTINCT id) AS NumberOfUsersJoined
		FROM user
		GROUP BY JoinedSince;

-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

-END-